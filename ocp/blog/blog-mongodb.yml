# DB template.
#
# This defines all the configurable parameters and other objects that are needed to run the MongoDB service. This template can even be
# saved in OpenShift namespace as well so that have the flexibility to do any project specific customizations. Pls note wherever
# displayName says *** PLEASE DO NOT CHANGE THIS ***, don't touch that as those parameters will be referenced in other places.
#
# Replication mode is not tested yet.
#
apiVersion: v1
kind: Template
metadata:
  name: blog-mongodb-template
  namespace: default
  annotations:
    description: This template defines objects that are required to spin up a mongodb pod
    tags: db, blog-mongodb ,persistent  
    openshift.io/display-name: blog-mongodb-template
    openshift.io/long-description: "This template provides objects that are required to spin up a mongodb pod. The database is stored on persistent storage, so any restart of the service will not cause any impact to the data.
     Please make sure you have provisioned PVs (Persistent Volumes) before using this template. "
    openshift.io/provider-display-name: JHipster-OpenShift
labels:
  app: blog-mongodb
  createdBy: JHipster-Team
parameters:
  -
    name: APPLICATION_NAME
    value: blog-mongodb
    description: Name of the application
    required: true
    displayName: Application Name
  -
    name: SECRET_REF
    value: ds-secret-ref
    description: Name of the secret reference
    required: true
    displayName: "*** PLEASE DO NOT CHANGE THIS ***"
  -
    name: DATABASE_NAME
    displayName: MongoDB Database Name
    description: Name of the MongoDB database accessed.
    value: blog
    required: true
  -
    name: MONGODB_USER
    displayName: MongoDB Connection Username
    description: Username for MongoDB user that will be used for accessing the database.
    generate: expression
    from: user[A-Z0-9]{3}
    required: true
  -
    name: MONGODB_PASSWORD
    displayName: MongoDB Connection Password
    description: Password for the MongoDB connection user.
    generate: expression
    from: "[a-zA-Z0-9]{16}"
    required: true
  -
    name: MONGODB_ADMIN_PASSWORD
    displayName: MongoDB Admin Password
    description: Password for the database admin user.
    generate: expression
    from: "[a-zA-Z0-9]{16}"
    required: true
  -
    name: VOLUME_CAPACITY
    displayName: Volume Capacity
    description: Volume space available for data, e.g. 512Mi, 2Gi.
    value: 1Gi
    required: true
objects:
  -
    apiVersion: v1
    kind: Secret
    metadata:
      name: ${SECRET_REF}
    stringData:
      database-user: "${MONGODB_USER}"
      database-password: "${MONGODB_PASSWORD}"
      database-admin-password: "${MONGODB_ADMIN_PASSWORD}"
  -
    apiVersion: v1
    kind: PersistentVolumeClaim
    metadata:
      name: ${APPLICATION_NAME}
    spec:
      accessModes:
      - ReadWriteOnce
      resources:
        requests:
          storage: "${VOLUME_CAPACITY}"
  -
    apiVersion: v1
    kind: DeploymentConfig
    metadata:
      name: ${APPLICATION_NAME}
      labels:
        app: ${APPLICATION_NAME}
    spec:
      strategy:
        type: Rolling
        rollingParams:
          updatePeriodSeconds: 1
          intervalSeconds: 1
          timeoutSeconds: 600
          maxUnavailable: 25%
          maxSurge: 25%
          post:
            failurePolicy: ignore
            execNewPod:
              command:
                - "/bin/sh"
                - "-ec"
                - |
                  hostname && mongo ${APPLICATION_NAME}:27017 --eval "db.getSiblingDB('${MONGODB_DATABASE}').createUser({'user':'${MONGODB_USER}','pwd':'${MONGODB_PASSWORD}','roles':[]})" && sleep 15
              containerName: ${APPLICATION_NAME}
        resources:
      triggers:
        -
          type: ConfigChange
      replicas: 1
      selector:
        app: ${APPLICATION_NAME}
      template:
        metadata:
          labels:
            app: ${APPLICATION_NAME}
        spec:
          volumes:
          - name: ${APPLICATION_NAME}-data
            persistentVolumeClaim:
              claimName: ${APPLICATION_NAME}
          containers:
          - name: ${APPLICATION_NAME}
            image: mongo:3.4.10
            env:
            - name: MONGODB_DATABASE
              value: ${DATABASE_NAME}
            - name: MONGODB_USER
              valueFrom:
                secretKeyRef:
                  name: ${SECRET_REF}
                  key: database-user
            - name: MONGODB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: ${SECRET_REF}
                  key: database-password
            - name: MONGODB_ADMIN_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: ${SECRET_REF}
                  key: database-admin-password
            ports:
            - containerPort: 27017
              protocol: TCP
            readinessProbe:
              timeoutSeconds: 1
              initialDelaySeconds: 15
              exec:
                command:
                - "/bin/sh"
                - "-i"
                - "-c"
                - mongo 127.0.0.1:27017 --eval="quit()"
            livenessProbe:
              timeoutSeconds: 1
              initialDelaySeconds: 20
              tcpSocket:
                port: 27017
            volumeMounts:
            - name: ${APPLICATION_NAME}-data
              mountPath: /data/db
            resources:
            imagePullPolicy: IfNotPresent
          restartPolicy: Always
          terminationGracePeriodSeconds: 30
  -
    apiVersion: v1
    kind: Service
    metadata:
      name: ${APPLICATION_NAME}
      labels:
        app: ${APPLICATION_NAME}
    spec:
      ports:
        -
          name: mongodb-bc
          protocol: TCP
          port: 27017
          targetPort: 27017
        -
          name: mongodb
          protocol: TCP
          port: 80
          targetPort: 27017
      selector:
        app: ${APPLICATION_NAME}
